    def temp(self, V_a, V0=None, T0=None):
        """
        Return temperature along adiabat described by gamma model.
        """
        TOL = 1e-8
        Nsamp = 81
        # Nsamp = 281
        # Nsamp = 581

        if self.V0ref:
            VR, = core.get_params( ['V0'], eos_d )
        else:
            VR, = core.get_params( ['VR'], eos_d )


        Vmin = np.min(V_a)
        Vmax = np.max(V_a)

        dVmax = np.log(Vmax/VR)
        dVmin = np.log(Vmin/VR)

        T_a = TR*np.ones(V_a.size)

        if np.abs(dVmax) < TOL:
            dVmax = 0.0
        if np.abs(dVmin) < TOL:
            dVmin = 0.0


        if dVmax > TOL:
            indhi_a = np.where(np.log(V_a/VR) > TOL)[0]
            # indhi_a = np.where(V_a > VR)[0]

            # ensure numerical stability by shifting
            # if (Vmax-VR)<=TOL:
            #     T_a[indhi_a] = TR
            # else:
            Vhi_a = np.linspace(VR,Vmax,Nsamp)
            gammahi_a = self.gamma( Vhi_a, eos_d )
            logThi_a = integrate.cumtrapz(-gammahi_a/Vhi_a,x=Vhi_a)
            logThi_a = np.append([0],logThi_a)
            logtemphi_f = interpolate.interp1d(Vhi_a,logThi_a,kind='cubic')
            T_a[indhi_a] = TR*np.exp(logtemphi_f(V_a[indhi_a]))

        if dVmin < -TOL:
            indlo_a = np.where(np.log(V_a/VR) < -TOL)[0]
            # indlo_a = np.where(V_a <= VR)[0]

            # # ensure numerical stability by shifting
            # if (VR-Vmin)<TOL:
            #     T_a[indlo_a] = TR
            # else:
            Vlo_a = np.linspace(VR,Vmin,Nsamp)
            gammalo_a = self.gamma( Vlo_a, eos_d )
            logTlo_a = integrate.cumtrapz(-gammalo_a/Vlo_a,x=Vlo_a)
            logTlo_a = np.append([0],logTlo_a)
            logtemplo_f = interpolate.interp1d(Vlo_a,logTlo_a,kind='cubic')
            T_a[indlo_a] = TR*np.exp(logtemplo_f(V_a[indlo_a]))

        return T_a
#
